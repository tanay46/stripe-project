{"ast":null,"code":"var _jsxFileName = \"/Users/tanayjaipuria/Documents/1 - Projects/stripe/client/src/App.js\";\nimport React, { Component } from 'react';\nimport { useState } from 'react';\nimport axios from 'axios';\nimport logo from \"./logo.svg\";\nimport './App.css';\nimport { CardElement, Elements, useElements, useStripe } from '@stripe/react-stripe-js';\nimport { loadStripe } from '@stripe/stripe-js';\nconst stripePromise = loadStripe(\"pk_test_yi5vaBRaG2ZUpMl3NndTsMvy00RxCqiWC8\");\n\nconst CheckoutForm = props => {\n  const [name, setName] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const stripe = useStripe();\n  const elements = useElements();\n\n  const handleSubmit = async event => {\n    // Block native form submission.\n    event.preventDefault();\n\n    if (!stripe || !elements) {\n      // Stripe.js has not loaded yet. Make sure to disable\n      // form submission until Stripe.js has loaded.\n      return;\n    }\n\n    console.log(\"props is\");\n    console.log(props);\n    const cardElement = elements.getElement(CardElement);\n    console.log(cardElement);\n    console.log(name);\n    console.log(email);\n    const result = await stripe.confirmCardPayment(props.clientSecret, {\n      payment_method: {\n        card: cardElement,\n        billing_details: {\n          name: name,\n          email: email\n        }\n      }\n    });\n\n    if (result.error) {\n      // Show error to your customer (e.g., insufficient funds)\n      console.log(result.error.message);\n    } else {\n      // The payment has been processed!\n      if (result.paymentIntent.status === 'succeeded') {\n        console.log(\"Worked\");\n        console.log(name);\n        console.log(email);\n        axios.post('/writetolog', {\n          name: this.state.name,\n          email: this.state.email\n        }).then(function (response) {\n          console.log(response);\n        }); // Show a success message to your customer\n        // There's a risk of the customer closing the window before callback\n        // execution. Set up a webhook or plugin to listen for the\n        // payment_intent.succeeded event that handles any business critical\n        // post-payment actions.\n      }\n    }\n  };\n\n  return React.createElement(\"form\", {\n    onSubmit: handleSubmit,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    className: \"FormRowInput\",\n    id: \"name\",\n    type: \"text\",\n    placeholder: \"Jane Doe\",\n    required: \"required\",\n    onChange: e => setName(e.target.value),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  }), React.createElement(\"input\", {\n    className: \"FormRowInput\",\n    id: \"email\",\n    type: \"email\",\n    placeholder: \"janedoe@gmail.com\",\n    required: \"required\",\n    autoComplete: \"email\",\n    onChange: e => setEmail(e.target.value),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81\n    },\n    __self: this\n  }), React.createElement(CardElement, {\n    options: {\n      style: {\n        base: {\n          fontSize: '16px',\n          color: '#424770',\n          '::placeholder': {\n            color: '#aab7c4'\n          }\n        },\n        invalid: {\n          color: '#9e2146'\n        }\n      }\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90\n    },\n    __self: this\n  }), React.createElement(\"button\", {\n    type: \"submit\",\n    className: \"button\",\n    disabled: !stripe,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106\n    },\n    __self: this\n  }, \"Pay\"));\n};\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      data: null\n    };\n\n    this.callBackendAPI = async () => {\n      const response = await fetch('/pay_intent');\n      const body = await response.json();\n      console.log(body);\n\n      if (response.status !== 200) {\n        throw Error(body.message);\n      }\n\n      return body;\n    };\n  }\n\n  componentDidMount() {\n    // Call our fetch function below once the component mounts\n    this.callBackendAPI().then(res => this.setState({\n      data: res.clientSecret\n    })).catch(err => console.log(err));\n  } // Fetches our GET route from the Express server. (Note the route we are fetching matches the GET route from server.js\n\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138\n      },\n      __self: this\n    }, React.createElement(\"header\", {\n      className: \"App-header\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      src: \"amazon.png\",\n      className: \"App-logo\",\n      alt: \"logo\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140\n      },\n      __self: this\n    }), React.createElement(\"h1\", {\n      className: \"App-title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141\n      },\n      __self: this\n    }, \"Buy An Amazon Gift Card for $15\"), React.createElement(Elements, {\n      stripe: stripePromise,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142\n      },\n      __self: this\n    }, React.createElement(CheckoutForm, {\n      clientSecret: this.state.data,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143\n      },\n      __self: this\n    }))), React.createElement(\"p\", {\n      className: \"App-intro\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146\n      },\n      __self: this\n    }, this.state.data));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/tanayjaipuria/Documents/1 - Projects/stripe/client/src/App.js"],"names":["React","Component","useState","axios","CardElement","Elements","useElements","useStripe","loadStripe","stripePromise","CheckoutForm","props","name","setName","email","setEmail","stripe","elements","handleSubmit","event","preventDefault","console","log","cardElement","getElement","result","confirmCardPayment","clientSecret","payment_method","card","billing_details","error","message","paymentIntent","status","post","state","then","response","e","target","value","style","base","fontSize","color","invalid","App","data","callBackendAPI","fetch","body","json","Error","componentDidMount","res","setState","catch","err","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { useState } from 'react';\nimport axios from 'axios';\nimport logo from './logo.svg';\nimport './App.css';\nimport {CardElement, Elements, useElements, useStripe} from '@stripe/react-stripe-js';\nimport {loadStripe} from '@stripe/stripe-js';\n\nconst stripePromise = loadStripe(\"pk_test_yi5vaBRaG2ZUpMl3NndTsMvy00RxCqiWC8\");\n\nconst CheckoutForm = props => {\n\n  const [name, setName] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n\n  const stripe = useStripe();\n  const elements = useElements();\n\n  const handleSubmit = async (event) => {\n    // Block native form submission.\n    event.preventDefault();\n\n    if (!stripe || !elements) {\n      // Stripe.js has not loaded yet. Make sure to disable\n      // form submission until Stripe.js has loaded.\n      return;\n    }\n    console.log(\"props is\");\n    console.log(props);\n    const cardElement = elements.getElement(CardElement);\n    console.log(cardElement);\n    console.log(name);\n    console.log(email);\n\n    const result = await stripe.confirmCardPayment(props.clientSecret, {\n      payment_method: {\n        card: cardElement,\n        billing_details: {\n          name: name,\n          email: email\n        },\n      }\n    });\n\n    if (result.error) {\n      // Show error to your customer (e.g., insufficient funds)\n      console.log(result.error.message);\n\n    } else {\n      // The payment has been processed!\n      if (result.paymentIntent.status === 'succeeded') {\n        console.log(\"Worked\");\n        console.log(name);\n        console.log(email);\n        axios.post('/writetolog', {\n          name: this.state.name,\n          email: this.state.email\n        }).then(function (response) {\n          console.log(response);\n        });\n\n        // Show a success message to your customer\n        // There's a risk of the customer closing the window before callback\n        // execution. Set up a webhook or plugin to listen for the\n        // payment_intent.succeeded event that handles any business critical\n        // post-payment actions.\n      }\n    }\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n    <input\n      className=\"FormRowInput\"\n      id=\"name\"\n      type=\"text\"\n      placeholder=\"Jane Doe\"\n      required=\"required\"\n      onChange={e => setName(e.target.value)}\n    />\n    <input\n      className=\"FormRowInput\"\n      id=\"email\"\n      type=\"email\"\n      placeholder=\"janedoe@gmail.com\"\n      required=\"required\"\n      autoComplete=\"email\"\n      onChange={e => setEmail(e.target.value)}\n    />\n    <CardElement\n        options={{\n          style: {\n            base: {\n              fontSize: '16px',\n              color: '#424770',\n              '::placeholder': {\n                color: '#aab7c4',\n              },\n            },\n            invalid: {\n              color: '#9e2146',\n            },\n          },\n        }}\n      />\n      <button type=\"submit\" className=\"button\" disabled={!stripe}>\n        Pay\n      </button>\n    </form>\n  );\n};\n\nclass App extends Component {\nstate = {\n    data: null\n  };\n\n  componentDidMount() {\n      // Call our fetch function below once the component mounts\n    this.callBackendAPI()\n      .then(res => this.setState({ data: res.clientSecret }))\n      .catch(err => console.log(err));\n  }\n    // Fetches our GET route from the Express server. (Note the route we are fetching matches the GET route from server.js\n  callBackendAPI = async () => {\n    const response = await fetch('/pay_intent');\n    const body = await response.json();\n    console.log(body);\n\n    if (response.status !== 200) {\n      throw Error(body.message) \n    }\n    return body;\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src=\"amazon.png\" className=\"App-logo\" alt=\"logo\" />\n          <h1 className=\"App-title\">Buy An Amazon Gift Card for $15</h1>\n           <Elements stripe={stripePromise}>\n            <CheckoutForm clientSecret={this.state.data}/>\n          </Elements>\n        </header>\n        <p className=\"App-intro\">{this.state.data}</p>\n      </div>\n    );\n  }\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}