{"ast":null,"code":"var _jsxFileName = \"/Users/tanayjaipuria/Documents/1 - Projects/stripe/client/src/App.js\";\nimport React, { Component } from 'react';\nimport logo from \"./logo.svg\";\nimport './App.css';\nimport { CardElement, Elements, useElements, useStripe } from '@stripe/react-stripe-js';\nimport { loadStripe } from '@stripe/stripe-js';\nconst stripePromise = loadStripe(\"pk_test_yi5vaBRaG2ZUpMl3NndTsMvy00RxCqiWC8\");\n\nconst CheckoutForm = () => {\n  const stripe = useStripe();\n  const elements = useElements();\n\n  const handleSubmit = async event => {\n    // Block native form submission.\n    event.preventDefault();\n\n    if (!stripe || !elements) {\n      // Stripe.js has not loaded yet. Make sure to disable\n      // form submission until Stripe.js has loaded.\n      return;\n    }\n\n    const clientsecret = await fetch('/pay_intent').json().clientSecret;\n    const cardElement = elements.getElement(CardElement);\n    const result = await stripe.confirmCardPayment('', {\n      payment_method: {\n        card: elements.getElement(CardElement),\n        billing_details: {\n          name: 'Jenny Rosen'\n        }\n      }\n    }); // Use your card Element with other Stripe.js APIs\n\n    const {\n      error,\n      paymentMethod\n    } = await stripe.createPaymentMethod({\n      type: 'card',\n      card: cardElement\n    });\n\n    if (error) {\n      console.log('[error]', error);\n    } else {\n      console.log('[PaymentMethod]', paymentMethod);\n    }\n  };\n\n  return React.createElement(\"form\", {\n    onSubmit: handleSubmit,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52\n    },\n    __self: this\n  }, React.createElement(CardElement, {\n    options: {\n      style: {\n        base: {\n          fontSize: '16px',\n          color: '#424770',\n          '::placeholder': {\n            color: '#aab7c4'\n          }\n        },\n        invalid: {\n          color: '#9e2146'\n        }\n      }\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53\n    },\n    __self: this\n  }), React.createElement(\"button\", {\n    type: \"submit\",\n    disabled: !stripe,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69\n    },\n    __self: this\n  }, \"Pay\"));\n};\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      data: null\n    };\n\n    this.callBackendAPI = async () => {\n      const response = await fetch('/pay_intent');\n      const body = await response.json();\n      console.log(body);\n\n      if (response.status !== 200) {\n        throw Error(body.message);\n      }\n\n      return body;\n    };\n  }\n\n  componentDidMount() {\n    // Call our fetch function below once the component mounts\n    this.callBackendAPI().then(res => this.setState({\n      data: res.express\n    })).catch(err => console.log(err));\n  } // Fetches our GET route from the Express server. (Note the route we are fetching matches the GET route from server.js\n\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }, React.createElement(\"header\", {\n      className: \"App-header\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      src: logo,\n      className: \"App-logo\",\n      alt: \"logo\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }), React.createElement(\"h1\", {\n      className: \"App-title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }, \"Welcome to Tanays Store\"), React.createElement(Elements, {\n      stripe: stripePromise,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }, React.createElement(CheckoutForm, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }))), React.createElement(\"p\", {\n      className: \"App-intro\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110\n      },\n      __self: this\n    }, this.state.data));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/tanayjaipuria/Documents/1 - Projects/stripe/client/src/App.js"],"names":["React","Component","CardElement","Elements","useElements","useStripe","loadStripe","stripePromise","CheckoutForm","stripe","elements","handleSubmit","event","preventDefault","clientsecret","fetch","json","clientSecret","cardElement","getElement","result","confirmCardPayment","payment_method","card","billing_details","name","error","paymentMethod","createPaymentMethod","type","console","log","style","base","fontSize","color","invalid","App","state","data","callBackendAPI","response","body","status","Error","message","componentDidMount","then","res","setState","express","catch","err","render","logo"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport {CardElement, Elements, useElements, useStripe} from '@stripe/react-stripe-js';\nimport {loadStripe} from '@stripe/stripe-js';\n\nconst stripePromise = loadStripe(\"pk_test_yi5vaBRaG2ZUpMl3NndTsMvy00RxCqiWC8\");\n\nconst CheckoutForm = () => {\n  const stripe = useStripe();\n  const elements = useElements();\n\n\n\n  const handleSubmit = async (event) => {\n    // Block native form submission.\n    event.preventDefault();\n\n    if (!stripe || !elements) {\n      // Stripe.js has not loaded yet. Make sure to disable\n      // form submission until Stripe.js has loaded.\n      return;\n    }\n\n    const clientsecret = await fetch('/pay_intent').json().clientSecret;\n    const cardElement = elements.getElement(CardElement);\n\n    const result = await stripe.confirmCardPayment('', {\n      payment_method: {\n        card: elements.getElement(CardElement),\n        billing_details: {\n          name: 'Jenny Rosen',\n        },\n      }\n    });\n\n\n    // Use your card Element with other Stripe.js APIs\n    const {error, paymentMethod} = await stripe.createPaymentMethod({\n      type: 'card',\n      card: cardElement,\n    });\n\n    if (error) {\n      console.log('[error]', error);\n    } else {\n      console.log('[PaymentMethod]', paymentMethod);\n    }\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <CardElement\n        options={{\n          style: {\n            base: {\n              fontSize: '16px',\n              color: '#424770',\n              '::placeholder': {\n                color: '#aab7c4',\n              },\n            },\n            invalid: {\n              color: '#9e2146',\n            },\n          },\n        }}\n      />\n      <button type=\"submit\" disabled={!stripe}>\n        Pay\n      </button>\n    </form>\n  );\n};\n\n\nclass App extends Component {\nstate = {\n    data: null\n  };\n\n  componentDidMount() {\n      // Call our fetch function below once the component mounts\n    this.callBackendAPI()\n      .then(res => this.setState({ data: res.express }))\n      .catch(err => console.log(err));\n  }\n    // Fetches our GET route from the Express server. (Note the route we are fetching matches the GET route from server.js\n  callBackendAPI = async () => {\n    const response = await fetch('/pay_intent');\n    const body = await response.json();\n    console.log(body);\n\n    if (response.status !== 200) {\n      throw Error(body.message) \n    }\n    return body;\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <h1 className=\"App-title\">Welcome to Tanays Store</h1>\n           <Elements stripe={stripePromise}>\n            <CheckoutForm />\n          </Elements>\n        </header>\n        <p className=\"App-intro\">{this.state.data}</p>\n      </div>\n    );\n  }\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}